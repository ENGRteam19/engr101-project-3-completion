#include "robot.hpp"

// structure of booleans showing what paths can be taken
struct Path {
	bool left = false;
	bool straight = false;
	bool right = false;
	bool ifPath = false;
};

int main(){
	if (initClientRobot() !=0){
		std::cout<<" Error initializing robot"<<std::endl;
	}
	double vBase = 15.0; //defining base speed
    double vLeft = vBase;
    double vRight = vBase;
    
    

    while(1){
		takePicture();
		SavePPMFile("i0.ppm",cameraView);
		
		//variables for sides or area of white line
		int lLeft = cameraView.width;
		int lRight = 0;
		
		Path path; //creating instance of Path structure
		
		for (int row = 0; row < cameraView.height; row++) {
			for ( int column = 0; column < cameraView.width ; column++) {
				int curPix = get_pixel(cameraView, row, column, 3);	//getting current pixel
				//Checking to see if pixel is white
				if(curPix > 250) {
					path.ifPath = true; // checking if path exists
					
					//checking what directions path goes in
					if(row == 0) {
						path.straight = true;
					}
					if(column == 0 && row > 5) {
						path.left = true;
					}
					if(column == cameraView.width-1 && row > 5) {
						path.right = true;
					}
					
					if (row == cameraView.height/2) {
					//setting dimensions of line
						if (column < lLeft) {
							lLeft = column;
						}
						else if(column > lRight) {
							lRight = column;
						}
					}
				}
			}
		}
		
		//Caculating change in error based on paths prioritizing the right most
		double direction;
		if(path.right){
			direction = -100; 
		}
		else if(path.straight) {
			direction = 0;
		}
		else if(path.left) {
			direction = 100;
		}
		else if(!path.ifPath) {
			direction = -15/0.05;
			std::cout<<"hello"<<std::endl;
		}
		
		int centre = (int)((lLeft + lRight)/2); //calculate line centre
		double error = centre - cameraView.width/2 - direction; // calculating error
		double dv = 0.05*error;
		
		// setting moter speeds
		vLeft = vBase + dv;
		vRight = vBase - dv;
		
		setMotors(vLeft,vRight);
		
		std::cout<<" vLeft="<<vLeft<<"  vRight="<<vRight<<std::endl;
		
		usleep(10000);
	} //while

} // main
